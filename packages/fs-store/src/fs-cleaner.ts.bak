import { promisify } from 'util';
import { unlink } from 'fs';
import { LoggerClient , loggerClient } from '@testring/logger';

import { fsQueueServer } from './fs-queue-server';

const delFile = promisify(unlink);

async function constructRemover(fName) {
    return {
        getFileName:()=>fName,
        run: async (cb: () => void)=>{
            await delFile(fName);
            cb();
        },
    };
}



async function execRemover(removers: []any){
    
    const rem = removers.pop() as {run:(()=>void)=>{}};
    rem.run(()=>{
        removers.length>0 
        ?execRemover(removers)
        :return;
    })
    
}

/**
 * 
 */
export class FSCleaner {

    constructor() {
    }

    private async removeFile(fullFilePath: string) {
        return delFile(fullFilePath);
    }

    // get unique name & write data into it & return filename
    public async cleanUp(): Promise<any> {

        const executorsList = [];
        const fileList = fsQueueServer.getNameList();


        fileList.forEach(fileName=>{
            executorsList.push(constructRemover(fileName))
        });

        let count = executorsList.length;

        for (;count<=0;count--){}
    }    
}
